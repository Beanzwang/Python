#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Jan 29 20:29:24 2017

@author: wangbeanz
"""

import numpy as np
import matplotlib.pyplot as plt

Nclass = 500

# generate 3 Gausiann clouds.
X1 = np.random.randn(Nclass, 2) + np.array([0, -2])
X2 = np.random.randn(Nclass, 2) + np.array([2, 2])
X3 = np.random.randn(Nclass, 2) + np.array([-2, 2])
X = np.vstack([X1, X2, X3])  # stack the array. X(1500, 2)

Y = np.array([0]*Nclass + [1]*Nclass + [2]*Nclass)  # (1500, )

plt.scatter(X[:, 0], X[:, 1], c=Y, s=100, alpha=0.5)
plt.show()  # scatter the data points to see the distributions.


D = 2  # number of features
M = 3  # hidden layer size
K = 3  # number of classes

w1 = np.random.randn(D, M)
b1 = np.random.randn(M)
w2 = np.random.randn(M, K)
b2 = np.random.randn(K)

def forwardprop(X, w1, b1, w2, b2):
    Z = 1 / (1 + np.exp(-X.dot(w1) - b1))
    A = Z.dot(w2) + b2
    expA = np.exp(A)
    Y = expA / expA.sum(axis=1, keepdims=True)
    return Y

def classification_rate(Y, P):
    n_total = 0
    n_correct = 0
    for i in range(len(Y)):
        n_total += 1
        if Y[i] == P[i]:
            n_correct += 1
    return float(n_correct) / n_total

P_Y_given_X = forwardprop(X, w1, b1, w2, b2) 
P = np.argmax(P_Y_given_X, axis=1)

assert(len(P) == len(Y))

# haven't train the model yet, so the results won't be good.
print('classification rate: ', classification_rate(Y, P))


