#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Jan 30 16:02:39 2017

@author: wangbeanz
"""
'''
This is a theano practice file.
Tutorial link: http://speech.ee.ntu.edu.tw/~tlkagk/courses/MLDS_2015_2/Lecture/Deep%20More%20(v2).ecm.mp4/index.html
'''

import theano

# Define a function f(x) = x^2, then compute f(-2)
x = theano.tensor.scalar()  # define input variable x.
y = x ** 2  # define output variable y
f = theano.function([x], y)  # declare the function.

print(f(-2))

# A variable can be a scalar, a matrix or a tensor (high dims matrix)
a = theano.tensor.scalar()  # declare a scalar a
b = theano.tensor.matrix()  # declare a matrix b
c = theano.tensor.matrix('Hi')  # declare a matrix c with name 'Hi'

# a, b, c are symbols without any value.
print(a)
print(b)
print(c)

import theano.tensor as T

a = T.scalar()
b = T.matrix()
c = T.matrix('Hi')

print(a)
print(b)
print(c)

# declare input x
x1 = T.scalar()
x2 = T.scalar()
x3 = T.matrix()
x4 = T.matrix()

# declare output y
y1 = x1 + x2
y2 = x1 * x2
y3 = x3 * x4  # elementwise multiplication.
y4 = T.dot(x3, x4)  # matrix multiplication

# declare a function
# the input of a function should be a list.
# Also, the function in theano can have multiple outputs.
f1 = theano.function([x1, x2], y1)
print(f1(5, 6))



# compute gradients.
# to compute dy/dx, simply g = T.grad(y, x)
# notice that y should be a scalar.
x = T.scalar('x')
y = x ** 2
g = T.grad(y, x)  # g = 2 * x

f2 = theano.function([x], y)
f2_prime = theano.function([x], g)

print(f2(-2))
print(f2_prime(-2))


x1 = T.scalar()
x2 = T.scalar()

y = x1 * x2
g = T.grad(y, [x1, x2])  # g = [x2, x1]

f = theano.function([x1, x2], y)
f_prime = theano.function([x1, x2], g)

print(f(2, 4))
print(f_prime(2, 4))


A = T.matrix()
B = T.matrix()

C = A * B
D = T.sum(C)

g = T.grad(D, A)
y_prime = theano.function([A, B], g)

a = [[1, 2], [3, 4]]
b = [[2, 4], [6, 8]]

print(y_prime(a, b))



